version: 2.1
commands:
  setup_docker:
    steps:
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - restore_cache:
          key: docker-v3-{{ checksum "docker-compose.yml" }}-{{ checksum "Dockerfile" }}
          paths:
              - ~/caches/images.tar
      - run:
          name: Setup docker
          command: |
            set -x
            docker-compose pull db
            if [ ! -f ~/caches/images.tar ]; then
              docker-compose build
              mkdir -p ~/caches
              docker save table-structure-sample -o ~/caches/images.tar
            else
              docker load -i ~/caches/images.tar
            fi
      - save_cache:
          key: docker-v3-{{ checksum "docker-compose.yml" }}-{{ checksum "Dockerfile" }}
          paths:
            - ~/caches/images.tar
  setup_rails_bundle:
    steps:
      - restore_cache:
          key: rails-bundle-v1-{{ checksum "rails/Gemfile.lock" }}
          paths:
            - ~/caches/bundle.tar
      - run:
          name: Restore bundle
          command: |
            set -x
            if [ -f ~/caches/bundle.tar ]; then
              docker run --rm --volumes-from project_rails_1 -v ~/caches:/tmp busybox tar xvf /tmp/bundle.tar
            fi
      - run:
          command: docker-compose run --rm rails bundle install --jobs=4
      - run:
          name: Backup bundle
          command: |
            set -x
            if [ ! -f ~/caches/bundle.tar ]; then
              docker run --rm --volumes-from project_rails_1 -v ~/caches:/tmp busybox tar cvf /tmp/bundle.tar /usr/local/bundle
            fi
      - save_cache:
          key: rails-bundle-v1-{{ checksum "rails/Gemfile.lock" }}
          paths:
            - ~/caches/bundle.tar
  setup_rails_node_modules:
    steps:
      - restore_cache:
          key: rails-node-modules-v2-{{ checksum "rails/yarn.lock" }}
          paths:
            - ~/caches/rails_node_modules.tar
      - run:
          name: Restore Node modules
          command: |
            set -x
            if [ -f ~/caches/rails_node_modules.tar ]; then
              tar xvf ~/caches/rails_node_modules.tar
            fi
      - run:
          command: docker-compose run --rm rails yarn install
      - run:
          name: Backup Node modules
          command: |
            set -x
            if [ ! -f ~/caches/rails_node_modules.tar ]; then
              tar cvf ~/caches/rails_node_modules.tar ~/project/rails/node_modules
            fi
      - save_cache:
          key: rails-node-modules-v2-{{ checksum "rails/yarn.lock" }}
          paths:
            - ~/caches/rails_node_modules.tar

jobs:
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - setup_docker
      - run:
          command: docker-compose up -d
      - setup_rails_bundle
      - setup_rails_node_modules
      - run:
          command: docker-compose run --rm rails bundle exec rails db:create db:schema:load RAILS_ENV=test --trace
      - run:
          name: Run RSpec for Rails
          command: |
            TEST_FILES="$(circleci tests glob 'spec/**/*_spec.rb' | circleci tests split --split-by=timings)"
            docker-compose run --rm rails bundle exec rspec \
                                                --format documentation \
                                                --format RspecJunitFormatter \
                                                --out test-results/rspec/results.xml \
                                                $TEST_FILES
      - store_test_results:
          path: ~/project/rails/test-results
      - run:
          command: docker-compose down
